from fastapi import HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from .models import User, Article
from .schemas import TagUpdate,ArticleOut
from .auth import hash_password,verify_password
from .llm import generate_tags
import logging

from .wiki import fetch_article_body_from_wikipedia

logger = logging.getLogger("uvicorn")
async def get_user_by_username(db: AsyncSession, username: str):
    result = await db.execute(select(User).where(User.username == username))
    return result.scalar()




async def create_user(db: AsyncSession, username: str, password: str):
    user = User(username=username, hashed_password=hash_password(password))
    db.add(user)
    await db.commit()
    await db.refresh(user)
    return user

async def authenticate_user(db, username, password):
    user = await get_user_by_username(db, username)
    if user and verify_password(password, user.hashed_password):
        return user
    return None

# async def save_article(db: AsyncSession, user_id: int, title: str, url: str):
#     # tags = await generate_tags(title)
#     article = Article(title=title, url=url, tags='test', user_id=user_id)
#     db.add(article)
#     await db.commit()
#     return article

async def save_article(db: AsyncSession, user_id: int, title: str, page_id: int, snippet: str):
    tags = await generate_tags(title)
    tags = str(tags['text'])
    try:
        body = await fetch_article_body_from_wikipedia(page_id)
    except (RuntimeError, ValueError) as e:
        raise HTTPException(status_code=500, detail=str(e))
    article = Article(
        user_id=user_id,
        title=title,
        body=body,
        tags=tags,
        page_id=page_id,
        snippet=snippet
    )
    db.add(article)
    await db.commit()
    await db.refresh(article)
    return article


async def get_user_articles(db: AsyncSession, user_id: int):
    result = await db.execute(select(Article).where(Article.user_id == user_id))
    return result.scalars().all()

async def get_user_article(db: AsyncSession, page_id: int):
    result = await db.execute(select(Article).where(Article.page_id == page_id))
    # return result.columns().all()
    article = result.scalar_one_or_none()  # Fetches the first result (if any)
    return article

async def set_tags(db: AsyncSession, tag_update: TagUpdate):
    result = await db.execute(
        select(Article).where(Article.page_id == int(tag_update.pageid))
    )
    article = result.scalar_one_or_none()

    if article:
        article.tags = tag_update.tags
        await db.commit()
        await db.refresh(article)
        return article